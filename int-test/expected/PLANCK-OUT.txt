Legal output

Planck
------

Copyright © 2015 Mike Fikes and Contributors
Distributed under the Eclipse Public License either version 1.0 or (at your
option) any later version.


Portions of Planck may utilize the following copyrighted material, the use of
which is hereby acknowledged.

Ambly
-----

Copyright © 2015 David Nolen
Licensed under the Eclipse Public License.


Linenoise
---------

Copyright (c) 2010-2014, Salvatore Sanfilippo <antirez at gmail dot com>
Copyright (c) 2010-2013, Pieter Noordhuis <pcnoordhuis at gmail dot com>

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


ZipZap
------

Copyright (c) 2012, Pixelglow Software.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
Repeated ordered -e and -i, supressing nil
foo
:a
bar
2
foo
Test :cljs/quit
1
Test quit
1
Test exit
1
Exit on first error
ok
x

Test cope with syntax errors
Invalid number format [34f]

Invalid token: a:

Multi-line data
[1 2]
Multi-line string
"abc\ndef"
space before and after
3
Test print to stderr
nil
Test main
5
0
Test main zero
0
Test main one
0
Test main unhandled
1
Test main exit
17
Test REPL exit
nil
118
Test call fn exit
nil
119
Test run file with exit
111
Test in-ns
Argument to in-ns must be a symbol.
nil
Argument to in-ns must be a symbol.
nil
nil
#'alpha.beta/x
nil
#'gamma.delta/y
nil
#{:a}
nil
nil
#{:a}
Test require REPL special
nil
true
Test require REPL special exit in file
nil
195
Test require REPL special throws in file
bye-bye
nil
0
Test require unknown ns
No such namespace: unknown_ns.core, could not locate unknown_ns/core.cljs, unknown_ns/core.cljc, or Closure namespace "unknown_ns.core"
nil
Test require :reload
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload in changing spec
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload-all
nil
nil
nil
:initial
nil
nil
:reloaded
Test require :reload with cache
nil
nil
nil
:initial
nil
:initial
nil
nil
:reloaded
Test require-macros unknown ns
No such macros namespace: unknown-ns.core, could not locate unknown_ns/core.clj or unknown_ns/core.cljc
nil
Test require-macros REPL special
nil
5
Test in-ns REPL special
nil
:foo.bar/a
Test doc REPL special
-------------------------
cljs.core/inc
([x])
  Returns a number one greater than num.
nil
-------------------------
cljs.core/when
([&form &env test & body])
Macro
  Evaluates test. If logical true, evaluates body in an implicit do.
nil
-------------------------
if
   (if test then else?)
Special Form
  Evaluates test. If not the singular values nil or false,
  evaluates and yields then, otherwise, evaluates and yields else. If
  else is not supplied it defaults to nil.

  Please see http://clojure.org/special_forms#if
nil
-------------------------
doc
([name])
REPL Special Function
  Prints documentation for a var or special form given its name
nil
#'cljs.user/f
-------------------------
cljs.user/f
([param])
  docstring
nil
nil
-------------------------
test-doc-source.core/my-function
([x])
  This is a cool
  function with a docstring.
nil
Test source REPL special
(defn inc
  "Returns a number one greater than num."
  [x] (cljs.core/+ x 1))
nil
(core/defmacro when
     "Evaluates test. If logical true, evaluates body in an implicit do."
     [test & body]
     (core/list 'if test (cons 'do body)))
nil
nil
(defn my-function
  "This is a cool
  function with a docstring."
  [x]
  (* x x))
nil
Test pst REPL special
#'cljs.user/f
#'cljs.user/g
whoah

whoah

nil
#'cljs.user/e
ouch

ouch

nil
whoah

nil
Test load-file REPL special
#'test-load-file.core/success
nil
true
Test load-file from classpath
#'test-load-file.core/success
nil
true
Test doc support for load-file REPL special
-------------------------
load-file
([name])
REPL Special Function
  Sequentially read and evaluate the set of forms contained in the file.
nil
Test load-file REPL bad filename
Could not load file int-test/src/test_load_file/nofile.cljs
nil
Test load-file REPL error in file
nil
Test load-file REPL exit in file
nil
132
Spit / slurp
#'cljs.user/test-file
nil
#'cljs.user/test-spit-slurp
true
nil
true
nil
true
nil
true
nil
true
nil
Shell
nil
Shell stderr
nil
#{[:err "this is from stderr\n"] [:exit 0] [:out ""]}
Coercions
nil
nil
nil
#planck.io.File{:path "abc"}
#planck.io.File{:path "abc"}
"abc"
reader and read-line
nil
#'cljs.user/test-read
nil
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
nil
nil
nil
"a"
"b"
nil
nil
"a"
"b"
nil
nil
writer
nil
#'cljs.user/test-write
true
true
true
true
true
true
writer append
nil
#'cljs.user/test-write
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
true
Test write and read binary
nil
#'cljs.user/binary-file
nil
[1 2 3]
nil
nil
[1 2 3 4 5 6]
nil
nil
[7 8 9 10]
nil
nil
Test encoding
nil
#'cljs.user/content
#'cljs.user/filename
nil
true
Test file-seq
nil
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/B}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/B/E}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/B/F}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/C}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/C/G}
#planck.io.File{:path /tmp/PLANCK_FILE_SEQ/A/D}
nil
Test Google Closure index
nil
Test availability of goog libs
nil
#object[Object 20050403]
Test empty list of *command-line-args*
nil
nil
Test empty list of *command-line-args* following main opt
nil
nil
Treat init opts that follow -r main opt as *command-line-args* instead of evaluating them
nil
("-c" "src" "-e" "(println \"hi\")" "-v")
Treat init opts that follow nice -m ns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat init opts that follow nice --main=ns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat init opts that follow less nice -mns-name as *command-line-args* instead of evaluating them
args from main: (-v -e (println "hi"))
args from *command-line-args*: (-v -e (println "hi"))
0
Treat main opts that follow a main opt as *command-line-args* instead of evaluating them
nil
("-" "-m" "test-main.args" "-r")
Test *command-line-args* with nice clumped init opts
hi
nil
("here" "are" "some" "args")
Test *command-line-args* with less nicely clumped init opts
hi
nil
("here" "are" "some" "args")
Test binding of *command-line-args* in file run from command line
(here are some args)
0
Test classpath
nil
:src
nil
:src2
Test JAR support
nil
"Hello, from JAR"

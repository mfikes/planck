#!/usr/bin/env bash

# Run this from the planck/planck-cljs directory

# Make sure we fail and exit on the command that actually failed.
set -e
set -o pipefail

cp src/planck/{repl,core,shell}.clj out/planck
cp src/planck/from/io/aviso/ansi.clj out/planck/from/io/aviso

cat <<EOF > bundle.c
#include <stdlib.h>
#include <string.h>

#include <zlib.h>
EOF

cat <<EOF > bundle_dict.c
unsigned char *bundle_path_to_addr(char *path, unsigned int *len, unsigned int *gz_len) {
	if (path == NULL) {
		return NULL;
	}
EOF

cd out
for file in `find . -name '*.js' -o -name '*.cljs' -o -name '*.cljc' -o -name '*.clj' -o -name '*.map' -o -name '*.json'`
do 
file=${file:2}
cp $file $file.bak
gzip -9 $file
mv $file.bak $file
filegz=$file.gz
xxd -i $filegz >> ../bundle.c
rm $filegz
data_ref=${filegz//\//_}
data_ref=${data_ref//\./_}
data_ref=${data_ref//\$/_}
file_size=`wc -c $file | sed -e 's/^ *//' | cut -d' ' -f1`
echo "unsigned int ${data_ref}_len_uncompressed = ${file_size};" >> ../bundle.c
cat <<EOF >> ../bundle_dict.c
	else if (strcmp("${file}", path) == 0) {
		*gz_len = ${data_ref}_len;
		*len = ${data_ref}_len_uncompressed;
		return ${data_ref};
	}
EOF
done
cd ..
cat <<EOF >> bundle_dict.c

	return NULL;
}
EOF
cat bundle_dict.c >> bundle.c
cat <<EOF >> bundle.c
#include "bundle_inflate.h"

char *bundle_get_contents(char *path) {
	unsigned int gz_len = 0;
	unsigned int len = 0;
	unsigned char *gz_data = bundle_path_to_addr(path, &len, &gz_len);

	if (gz_data == NULL) {
		return NULL;
	}

	char *contents = malloc((len + 1) * sizeof(char));
	memset(contents, 0, len + 1);
	int res = 0;
	if ((res = bundle_inflate(contents, gz_data, gz_len, len)) < 0) {
		free(contents);
		return NULL;
	}

	return contents;
}

#ifdef BUNDLE_TEST
#include <stdio.h>

int main(int argc, char **argv) {
	if (argc != 2) {
		printf("%s <path>\n", argv[0]);
		exit(1);
	}

	char *contents = bundle_get_contents(argv[1]);
	if (contents == NULL) {
		printf("not in bundle\n");
		exit(1);
	}

	printf("%s", contents);
	free(contents);

	return 0;
}
#endif
EOF
rm bundle_dict.c
mv bundle.c ../planck-c
# We don't want git to suggest we commit this generated
# output, so we suppress it here.
if [ -d ../.git ]; then
  git update-index --assume-unchanged ../planck-c/bundle.c
fi;

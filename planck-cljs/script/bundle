#!/usr/bin/env bash

# Run this from the planck/planck-cljs directory

# Make sure we fail and exit on the command that actually failed.
set -e
set -o pipefail

cp src/planck/{repl,core,shell}.clj out/planck
cp src/planck/from/io/aviso/ansi.clj out/planck/from/io/aviso

cat <<EOF > bundle.c
#include <stdlib.h>
#include <string.h>

#include <zlib.h>
EOF

cat <<EOF > bundle_dict.c
unsigned char *bundle_path_to_addr(char *path, unsigned int *len, unsigned int *gz_len) {
	if (path == NULL) {
		return NULL;
	}
EOF

: ${XXDI:=xxd -i}

JAVASCRIPT_CORE="${JAVASCRIPT_CORE:-4}"
unamestr=`uname`
if [ "$unamestr" == 'Linux' ]
then
  if [ ! -d /usr/include/webkitgtk-4.0 ] && [ -d /usr/include/webkitgtk-3.0 ]
  then
    echo "Detected JavaScriptCore 3"
    JAVASCRIPT_CORE=3
  fi
fi

FAST_BUILD="${FAST_BUILD:-0}"

if [ ! -z "$TRAVIS_OS_NAME" ]
then
  echo "Because this is a CI build, setting FAST_BUILD=1"
  FAST_BUILD=1
fi

CLOSURE_OPTIMIZATIONS="${CLOSURE_OPTIMIZATIONS:-SIMPLE}"

if [ $FAST_BUILD == "1" ]
then
  echo "Because this is a fast build, setting Closure Optimizations to NONE"
  CLOSURE_OPTIMIZATIONS=NONE
elif [ $JAVASCRIPT_CORE == "3" ] && [ $CLOSURE_OPTIMIZATIONS != "NONE" ]
then
  echo "Because JavaScriptCore 3, setting Closure Optimizations to WHITESPACE_ONLY"
  CLOSURE_OPTIMIZATIONS=WHITESPACE_ONLY
fi

AOT_DECODE_SOURCE_MAPS="${AOT_DECODE_SOURCE_MAPS:-1}"

if [ $FAST_BUILD == "1" ]
then
  echo "Because this is a fast build, disabling AOT decoding of source maps"
  AOT_DECODE_SOURCE_MAPS=0
fi

if [ $CLOSURE_OPTIMIZATIONS != "NONE" ]
then
  echo "### Optimizing bundled JavaScript with Closure Optimizations:" $CLOSURE_OPTIMIZATIONS
fi

cd out
# Make sure we don't bundle test.check
rm -rf clojure/test/check*
# We don't need to bundle the extra cljs/core$macros.cljc file
rm -f cljs/core\$macros.cljc
# No need to bundle the bundle namespace
rm -rf planck/bundle.cljs
rm -f bundled_sdk_manifest.txt
for file in `find . -name '*.cljs' -o -name '*.cljc' -o -name '*.clj'`
do
file=${file:2}
echo $file >> bundled_sdk_manifest.txt
done
for file in `find goog -name '*.js'`
do
echo $file >> bundled_sdk_manifest.txt
done
for file in `find . -name '*.js' -o -name '*.cljs' -o -name '*.cljc' -o -name '*.clj' -o -name '*.map' -o -name '*.json' -o -name bundled_sdk_manifest.txt`
do 
file=${file:2}
cp -p $file $file.bak
if [ $CLOSURE_OPTIMIZATIONS != "NONE" ] && [ ${file: -3} == ".js" ] && [ "${file: -7}" != "deps.js" ] && [ "${file: -9}" != "bundle.js" ] && [ "${file: -9}" != "jscomp.js" ] && [ "${file: -6}" != "csv.js" ] && [ "${file: -19}" != "performancetimer.js" ]
then
  if [ ! -f $file.optim ] || [ $file -nt $file.optim ]
  then
    if [ -f $file.map ]
    then
      java -jar ../../compiler/closure-compiler-v$CLOSURE_RELEASE.jar --compilation_level $CLOSURE_OPTIMIZATIONS --language_in ECMASCRIPT3 --language_out ECMASCRIPT3 --process_closure_primitives false --js $file --js_output_file $file.optim --source_map_input $file\|$file.map --create_source_map $file.map.optim
    else
      java -jar ../../compiler/closure-compiler-v$CLOSURE_RELEASE.jar --compilation_level $CLOSURE_OPTIMIZATIONS --language_in ECMASCRIPT3 --language_out ECMASCRIPT3 --process_closure_primitives false --js $file --js_output_file $file.optim
    fi
    echo -n "."
  fi
  cp $file.optim $file
fi
if [ ${file: -4} == ".map" ] && [ -f $file.optim ]
then
  cp $file.optim $file
fi
# For the second pass, we will have the planck binary available and we can use it to AOT decode source maps
if [ $AOT_DECODE_SOURCE_MAPS == "1" ] && [ ${file: -4} == ".map" ] && [ -f ../../planck-c/build/planck ]
then
  echo -n "."
  ../../planck-c/build/planck ../script/decode.cljs $file
fi
uncompressed_file_size=`wc -c $file | sed -e 's/^ *//' | cut -d' ' -f1`
gzip -9 $file
mv $file.bak $file
filegz=$file.gz
${XXDI} $filegz >> ../bundle.c
rm $filegz
data_ref=${filegz//\//_}
data_ref=${data_ref//\./_}
data_ref=${data_ref//\$/_}
echo "unsigned int ${data_ref}_len_uncompressed = ${uncompressed_file_size};" >> ../bundle.c
cat <<EOF >> ../bundle_dict.c
	else if (strcmp("${file}", path) == 0) {
		*gz_len = ${data_ref}_len;
		*len = ${data_ref}_len_uncompressed;
		return ${data_ref};
	}
EOF
done
if [ $CLOSURE_OPTIMIZATIONS != "NONE" ]
then
  echo
fi
cd ..
cat <<EOF >> bundle_dict.c

	return NULL;
}
EOF
cat bundle_dict.c >> bundle.c
cat <<EOF >> bundle.c
#include "bundle_inflate.h"

char *bundle_get_contents(char *path) {
	unsigned int gz_len = 0;
	unsigned int len = 0;
	unsigned char *gz_data = bundle_path_to_addr(path, &len, &gz_len);

	if (gz_data == NULL) {
		return NULL;
	}

	char *contents = malloc((len + 1) * sizeof(char));
	memset(contents, 0, len + 1);
	int res = 0;
	if ((res = bundle_inflate(contents, gz_data, gz_len, len)) < 0) {
		free(contents);
		return NULL;
	}

	return contents;
}

#ifdef BUNDLE_TEST
#include <stdio.h>

int main(int argc, char **argv) {
	if (argc != 2) {
		printf("%s <path>\n", argv[0]);
		exit(1);
	}

	char *contents = bundle_get_contents(argv[1]);
	if (contents == NULL) {
		printf("not in bundle\n");
		exit(1);
	}

	printf("%s", contents);
	free(contents);

	return 0;
}
#endif
EOF
rm bundle_dict.c
mv bundle.c ../planck-c
# We don't want git to suggest we commit this generated
# output, so we suppress it here.
if [ -d ../.git ]; then
  git update-index --assume-unchanged ../planck-c/bundle.c
fi;

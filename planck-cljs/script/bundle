#!/usr/bin/env bash

# Make sure we fail and exit on the command that actually failed.
set -e
set -o pipefail

cp src/planck/{repl,core,shell}.clj out/planck
cp src/planck/from/io/aviso/ansi.clj out/planck/from/io/aviso

echo '#import <Foundation/Foundation.h>' > PLKBundledOut.m
echo '#import "zlib.h"' >> PLKBundledOut.m
echo "" > manifest.m
cd out
for file in `find . -name '*.js' -o -name '*.cljs' -o -name '*.cljc' -o -name '*.clj' -o -name '*.map' -o -name '*.json'`
do 
file=${file:2}
cp $file $file.bak
gzip -9 $file
mv $file.bak $file
filegz=$file.gz
xxd -i $filegz >> ../PLKBundledOut.m
rm $filegz
data_ref=${filegz//\//_}
data_ref=${data_ref//\./_}
data_ref=${data_ref//\$/_}
echo "@\"${file}\": @[[NSValue valueWithPointer:${data_ref}], [NSNumber numberWithInt:${data_ref}_len]]," >> ../manifest.m
done
cd ..
cat <<EOF >> PLKBundledOut.m
#import "PLKBundledOut.h"

@interface PLKBundledOut()

@property (strong) NSDictionary* manifest;

@end

@implementation PLKBundledOut 

-(id)init {
    if ( self = [super init] ) {
        self.manifest = @{
EOF

cat manifest.m >> PLKBundledOut.m

cat <<EOF >> PLKBundledOut.m
    };
  }
  return self;
}

-(NSString*)getSourceForPath:(NSString*)path {

    NSValue* value = (NSValue*)(self.manifest[path][0]);
    if (!value) {
      return nil;
    }

    unsigned char* p =[value pointerValue];
    int len = [(NSNumber*)self.manifest[path][1] intValue];
    
    NSData* data = [NSData dataWithBytes:p
                                  length:len];

    data = [self inflate:data];
    
    NSString* rv =
    [[NSString alloc] initWithData:data
                          encoding:NSUTF8StringEncoding];
    
    return rv;
}

-(NSData*)inflate:(NSData*)data {
    if ([data length] == 0) return data;
    
    uLong full_length = [data length];
    uLong half_length = [data length] / 2;
    
    NSMutableData *decompressed = [NSMutableData dataWithLength: full_length + half_length];
    BOOL done = NO;
    int status;
    
    z_stream strm;
    strm.next_in = (Bytef *)[data bytes];
    strm.avail_in = (uInt)[data length];
    strm.total_out = 0;
    strm.zalloc = Z_NULL;
    strm.zfree = Z_NULL;
    
    if (inflateInit2(&strm, (15+32)) != Z_OK) return nil;
    while (!done)
    {
        // Make sure we have enough room and reset the lengths.
        if (strm.total_out >= [decompressed length])
            [decompressed increaseLengthBy: half_length];
        strm.next_out = [decompressed mutableBytes] + strm.total_out;
        strm.avail_out = (uInt)((uLong)[decompressed length] - strm.total_out);
        
        // Inflate another chunk.
        status = inflate (&strm, Z_SYNC_FLUSH);
        if (status == Z_STREAM_END) done = YES;
        else if (status != Z_OK) break;
    }
    if (inflateEnd (&strm) != Z_OK) return nil;
    
    // Set real length.
    if (done)
    {
        [decompressed setLength: strm.total_out];
        return decompressed;
    }
    else return nil;
}

@end
EOF
rm manifest.m
mv PLKBundledOut.m ../planck
# We don't want git to suggest we commit this generated
# output, so we suppress it here.
if [ -d ../.git ]; then
  git update-index --assume-unchanged ../planck/PLKBundledOut.m
fi;
